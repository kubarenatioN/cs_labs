<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Delicious" xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" xmlns:Themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit">
    <SolidColorBrush x:Key="AccentGreen" Color="{DynamicResource AccentTextColor}"/>
    <SolidColorBrush x:Key="WhiteColor" Color="{DynamicResource White}"/>
    <Thickness x:Key="Thickness1">40,10</Thickness>
    <CornerRadius x:Key="CornerRadius1">0,0,20,20</CornerRadius>
    <Style x:Key="MainWindowHeaderStyle" TargetType="{x:Type Border}">
        <Setter Property="Padding" Value="{DynamicResource Thickness1}"/>
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius1}"/>
    </Style>
    <Color x:Key="White">#FFEEEEEE</Color>
    <Color x:Key="AccentTextColor">#FF139B19</Color>
    <FontFamily x:Key="FontFamily1">Futura Bk BT</FontFamily>

    <Style TargetType="{x:Type ToggleButton}" x:Key="ButtonHeader">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="3"/>
                        </Grid.RowDefinitions>

                        <Border Background="{TemplateBinding Background}">
                            <TextBlock 
                                Margin="30 10 30 0"
                                TextAlignment="Center" HorizontalAlignment="Stretch" 
                                VerticalAlignment="Center" FontFamily="{DynamicResource FontFamily1}" 
                                FontSize="20" FontWeight="Bold">
                                <TextBlock.Foreground>
                                    <SolidColorBrush Color="{DynamicResource AccentTextColor}"/>
                                </TextBlock.Foreground><InlineUIContainer>
                                
                                    <ContentPresenter/>
                                </InlineUIContainer></TextBlock>
                        </Border>
                        <Rectangle 
                            Margin="0 -3 0 3"
                            x:Name="rectangle" Grid.Row="1" 
                            StrokeThickness="0" 
                            Fill="{DynamicResource AccentGreen}" 
                            Opacity="0" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" Value="1" TargetName="rectangle"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource White}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>
    <SolidColorBrush x:Key="LightGreen" Color="#FFCDEACE"/>

    <Style x:Key="UserButtonControl" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundMain}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="10" BorderThickness="2" Padding="10 2 10 0">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{DynamicResource AccentTextColor}"/>
                        </Border.BorderBrush>
                        <TextBlock TextWrapping="Wrap" 
                                   Foreground="{TemplateBinding Foreground}"
                                   FontFamily="{DynamicResource FontFamily1}" 
                                   FontSize="16" 
                                   TextAlignment="Center" 
                                   VerticalAlignment="Center"><InlineUIContainer>
                                <ContentPresenter/>
                            </InlineUIContainer></TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AccentGreen}"/>
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Color x:Key="WhiteOpacityBackground">#88FFFFFF</Color>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BackButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource White}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                        CornerRadius="20"
                        Padding="{TemplateBinding Padding}"
                        x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" 
                        BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter x:Name="contentPresenter"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource AccentTextColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ForegroundMain" Color="Black"/>

    <Style x:Key="CardButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource White}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource ForegroundMain}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid>
                        <Grid.OpacityMask>
                            <VisualBrush Visual="{Binding ElementName=clippingBorder}"/>
                        </Grid.OpacityMask>
                        <Border
                            CornerRadius="20"
                            x:Name="clippingBorder">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource White}"/>
                            </Border.Background>
                        </Border>
                        <Border 
                            Padding="{TemplateBinding Padding}"
                            x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LightGreen}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TitleCardText" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="CardDescrText" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
        <Setter Property="Padding" Value="0 10 0 0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="MaxHeight" Value="100"/>
    </Style>

    <Style x:Key="PageTitleText" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource AccentTextColor}"/>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PageDescrText" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
        <Setter Property="Margin" Value="0 10"/>
    </Style>

    <Style x:Key="HeaderTitleText" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="32"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundMain}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="BookingControlText" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <Style x:Key="LongControlButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource AccentGreen}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundMain}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="20 10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            CornerRadius="20"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource AccentGreen}"/>
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#FF9EC992"/>
                            <Setter Property="Foreground" Value="#FF7A7A7A"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>
    <Style x:Key="LoginWindowText" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Foreground" Value="{DynamicResource AccentGreen}"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
    </Style>

    <Style x:Key="LoginTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="200"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource LightGreen}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundMain}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Padding" Value="8 4"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="20">
                        <ScrollViewer x:Name="PART_ContentHost" 
                                      Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentGreen}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PasswordBoxStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource LightGreen}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundMain}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Padding" Value="8 4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="20">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentGreen}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DateTimePickerStyle" TargetType="{x:Type xctk:DateTimePicker}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundMain}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource AccentGreen}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Padding" Value="4 8"/>
        <Setter Property="TimeWatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="CalendarWidth" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DateTimePicker}">
                    <Border 
                        CornerRadius="20" BorderBrush="{DynamicResource AccentGreen}" BorderThickness="1">
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.OpacityMask>
                                    <VisualBrush Visual="{Binding ElementName=clippingBorder}"/>
                                </Grid.OpacityMask>
                                <Border 
                                    CornerRadius="20" 
                                    Name="clippingBorder" 
                                    Grid.ColumnSpan="2"
                                    Background="White">
                                </Border>
                                <xctk:ButtonSpinner 
                                    Padding="{TemplateBinding Padding}"
                                    x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}" BorderThickness="0" ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" VerticalContentAlignment="Stretch">
                                    <xctk:WatermarkTextBox 
                                        x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="Transparent" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="True" IsUndoEnabled="True" MinWidth="20" Padding="{TemplateBinding Padding}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}">
                                        <xctk:WatermarkTextBox.Style>
                                            <Style TargetType="{x:Type xctk:WatermarkTextBox}">
                                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                                                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                <Setter Property="BorderThickness" Value="0"/>
                                                <Setter Property="Padding" Value="10"/>
                                                <Setter Property="AllowDrop" Value="True"/>
                                                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                
                                                <Setter Property="TextWrapping" Value="Wrap"/>
                                                <Setter Property="Foreground" Value="{DynamicResource AccentGreen}"/>
                                                <Setter Property="FontSize" Value="20"/>
                                                <Setter Property="FontFamily" Value="{DynamicResource FontFamily1}"/>
                                                <Setter Property="WatermarkTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <ContentControl Content="{Binding}" Focusable="False"/>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type xctk:WatermarkTextBox}">
                                                            <Grid>
                                                                <Border 
                                                                    x:Name="Border" 
                                                                        BorderBrush="{TemplateBinding BorderBrush}" 
                                                                        BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0">
                                                                    <Grid>
                                                                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                                        <ContentPresenter 
                                                                            x:Name="PART_WatermarkHost" Content="{TemplateBinding Watermark}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                            <ContentPresenter.ContentTemplate>
                                                                                <Binding Path="WatermarkTemplate" RelativeSource="{RelativeSource TemplatedParent}">
                                                                                    <Binding.TargetNullValue>
                                                                                        <DataTemplate>
                                                                                            <ContentControl Content="{Binding}" Foreground="{DynamicResource AccentGreen}" FontFamily="{DynamicResource FontFamily1}" Focusable="False"/>
                                                                                        </DataTemplate>
                                                                                    </Binding.TargetNullValue>
                                                                                </Binding>
                                                                            </ContentPresenter.ContentTemplate>
                                                                        </ContentPresenter>
                                                                    </Grid>
                                                                </Border>
                                                                <Border x:Name="MouseOverVisual" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="0">
                                                                    <Border.BorderBrush>
                                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                            <GradientStop Color="#FF5794BF" Offset="0.05"/>
                                                                            <GradientStop Color="#FFB7D5EA" Offset="0.07"/>
                                                                            <GradientStop Color="#FFC7E2F1" Offset="1"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.BorderBrush>
                                                                </Border>
                                                                <Border x:Name="FocusVisual" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="0">
                                                                    <Border.BorderBrush>
                                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                            <GradientStop Color="#FF3D7BAD" Offset="0.05"/>
                                                                            <GradientStop Color="#FFA4C9E3" Offset="0.07"/>
                                                                            <GradientStop Color="#FFB7D9ED" Offset="1"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.BorderBrush>
                                                                </Border>
                                                            </Grid>
                                                            <ControlTemplate.Triggers>
                                                                <MultiTrigger>
                                                                    <MultiTrigger.Conditions>
                                                                        <Condition Property="KeepWatermarkOnGotFocus" Value="False"/>
                                                                        <Condition Property="IsFocused" Value="False"/>
                                                                        <Condition Property="Text" Value=""/>
                                                                    </MultiTrigger.Conditions>
                                                                    <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible"/>
                                                                </MultiTrigger>
                                                                <MultiTrigger>
                                                                    <MultiTrigger.Conditions>
                                                                        <Condition Property="KeepWatermarkOnGotFocus" Value="True"/>
                                                                        <Condition Property="Text" Value=""/>
                                                                    </MultiTrigger.Conditions>
                                                                    <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible"/>
                                                                </MultiTrigger>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                </Trigger>
                                                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                                                    <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>

                                        </xctk:WatermarkTextBox.Style>
                                    </xctk:WatermarkTextBox>
                                </xctk:ButtonSpinner>
                                <ToggleButton 
                                    x:Name="_calendarToggleButton" 
                                    Background="{TemplateBinding Background}" Grid.Column="1" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.IsHitTestVisible>
                                        <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xctk:InverseBoolConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsHitTestVisible>
                                    <ToggleButton.IsEnabled>
                                        <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xctk:InverseBoolConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsEnabled>
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Width" Value="20"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Grid SnapsToDevicePixels="True">
                                                            <xctk:ButtonChrome 
                                                                x:Name="ToggleButtonChrome"
                                                                CornerRadius="0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}" BorderThickness="0">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="*"/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                                                    <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
                                                                        <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Height="5" Margin="0,1,0,0" Width="9"/>
                                                                    </Grid>
                                                                </Grid>
                                                            </xctk:ButtonChrome>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>
                            <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False" ToolTip="">
                                <Popup.Resources>
                                    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border BorderBrush="#FFABADB3" BorderThickness="1" Padding="3">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#FFF0F0F0" Offset="0"/>
                                            <GradientStop Color="#FFE5E5E5" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar" BorderThickness="0" DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" DisplayDate="2021-05-07">
                                            <Calendar.Template>
                                                <ControlTemplate TargetType="{x:Type Calendar}">
                                                    <Viewbox Width="{Binding CalendarWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}">
                                                        <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                                                            <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}"/>
                                                        </StackPanel>
                                                    </Viewbox>
                                                </ControlTemplate>
                                            </Calendar.Template>
                                        </Calendar>
                                        <xctk:TimePicker x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding TimePickerAllowSpin}" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" FormatString="{TemplateBinding TimeFormatString}" Format="{TemplateBinding TimeFormat}" IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}" Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}" ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}" Step="{TemplateBinding Step}" Text="" Visibility="{TemplateBinding TimePickerVisibility}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}" Watermark="{TemplateBinding TimeWatermark}"/>
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowButtonSpinner" Value="False"/>
                                <Condition Property="ShowDropDownButton" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="PART_Spinner">
                                <Setter.Value>
                                    <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <xctk:BorderThicknessConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>